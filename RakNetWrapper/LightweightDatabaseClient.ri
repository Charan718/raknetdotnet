<%= @type_mapper.start_scope('LightweightDatabaseClient') %>
<%= @type_mapper.apply_same_ctype('unsigned *', 'INPUT_BLITTABLE_ARRAY', 'rowIds') %>

%ignore LightweightDatabaseClient::UpdateRow(const char *tableName, const char *updatePassword, RowUpdateMode updateMode, bool hasRowId, unsigned rowId, DatabaseCellUpdate *cellUpdates, unsigned char numCellUpdates, SystemAddress systemAddress, bool broadcast);
%include "<%= @raknet_home %>/LightweightDatabaseClient.h"
%extend LightweightDatabaseClient {
  void UpdateRow(const char *tableName, const char *updatePassword, RowUpdateMode updateMode, bool hasRowId, unsigned rowId, std::vector<DatabaseCellUpdate> &cellUpdates, const SystemAddress &systemAddress, bool broadcast) {
    $self->UpdateRow(tableName, updatePassword, updateMode, hasRowId, rowId, &cellUpdates.at(0), cellUpdates.size(), systemAddress, broadcast);
  }
}

SWIG_STD_VECTOR_SPECIALIZE_MINIMUM(DatabaseCellUpdate, DatabaseCellUpdate)
%template(DatabaseCellUpdates) std::vector<DatabaseCellUpdate>;

<%= @type_mapper.end_scope %>
