<%#
大雑把な方針: 
  swigはパターンマッチングによって、C++とC#の間で変数を変換する。マッチング対象はあくまで、変数の型と名前が対象。
  同じ型でも変換方法を変えたいときは、関数宣言で特別な変数名を使うことになる。ところが.hをそのまま使って、ラッパーを
  作成するときはこれができない。でもたいていは、ひとつのヘッダ内だけに注目すれば、型と名前が同じなら
  変換方法も同じでよいことがほとんど。次のような２つの宣言があったとして、
    void foo(char* input);
    void bar(char* input);
  fooはinputを読み込みにしか使わないが、barは書き込みもする。などということがあるだろうか。普通そうはしないはず。
  この仮定で進めることにする...

インタフェースファイル:
  ラップするインタフェースとマッチングルール(%typemap, %apply, %template...)を書いたものだ。swigはパターンマッチングで
  ラッパーのコードを生成するのだけれど、そもそもルールの定義がめんどくさい。swigの開発者はマクロ使いなさいといってる。
  なので最初はBoost.Preprocessorを使って、マクロだけでメタプログラミングしようとしたけど、swigのマクロサポートはコンパイラほどではなかった。
  で、インタフェースファイルも生成してしまうことにした。ERB(Ruby)で。.riはrubyな(swig)interfaceということ。
    swig-renderer.rb RakNet.ri
  を実行すれば.i相当が得られる。

TODO: 余計なマーシャリングが起こらないようにする。何が余計かは使ってみないとわからないだろう。
%>

<%# ↓は.i用のコメント。間違えないようにね。 %>
// WARNING: このファイル(*.i)はコードジェネレーターにより作成されました。
// このファイルを書き換えないでください。必要ならソースファイル(*.ri)を修正してください。

%module(directors="1") RakNet
%{
#include "MessageIdentifiers.h"
#include "PacketPriority.h"
#include "PluginInterface.h"
#include "GetTime.h"
#include "PacketLogger.h"
#include "RakNetStatistics.h"
#include "RakNetworkFactory.h"
#include "ReplicaManager.h"
#include "ReplicaEnums.h"
#include "Replica.h"
%}

%include <typemaps.i>  // char*, const char* -> string
%include <windows.i>


// globals
<%= @type_mapper.typemap_input_blittable('char*', 'INPUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_input_blittable('const char*', 'INPUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_input_blittable('unsigned char*', 'INPUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_input_blittable('const unsigned char*', 'INPUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_input_blittable('const char*', 'INPUT_BLITTABLE_PTR', 'IntPtr') %>
// add more types.

<%= @type_mapper.typemap_inout_blittable('char*', 'INOUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_inout_blittable('unsigned char*', 'INOUT_BLITTABLE_ARRAY', 'byte[]') %>
// add more types.

<%= @type_mapper.typemap_void_ptr('unsigned char*', 'VOID_PTR') %>
<%= @type_mapper.typemap_void_ptr('void*', 'VOID_PTR') %>
// add more types.

%include "BitStream.i"

%include "../RakNet30Beta/Source/MessageIdentifiers.h"
%include "../RakNet30Beta/Source/PluginInterface.h"
%include "../RakNet30Beta/Source/PacketPriority.h"

%include "RakNetTypes.i"

%include "../RakNet30Beta/Source/GetTime.h"
%include "../RakNet30Beta/Source/PacketLogger.h"
%include "../RakNet30Beta/Source/RakNetStatistics.h"
%include "../RakNet30Beta/Source/RakNetworkFactory.h"

%include "DS_BinarySearchTree.i"
%include "NetworkIDGenerator.i"
%include "StringCompressor.i"
%include "RakPeerInterface.i"

%include "../RakNet30Beta/Source/ReplicaManager.h"
%include "../RakNet30Beta/Source/ReplicaEnums.h"
%include "../RakNet30Beta/Source/Replica.h"