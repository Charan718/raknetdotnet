<%= @type_mapper.start_scope('ReplicaManager') %>

%ignore ReplicaManager::SetReceiveConstructionCB;

%wrapper %{
typedef ReplicaReturnResult (__cdecl* RM_Callback_Construction)(RakNet::BitStream *inBitStream, RakNetTime timestamp, NetworkID networkID, Replica *existingReplica, SystemAddress senderId, ReplicaManager *caller, void *userData);
SWIGEXPORT void SWIGSTDCALL CSharp_ReplicaManager_SetReceiveConstructionCB(void * jarg1, void* jarg2, RM_Callback_Construction jarg3) {
  ReplicaManager *arg1 = (ReplicaManager *) 0 ;
  void *arg2 = (void *) 0 ;
  ReplicaReturnResult (*arg3)(RakNet::BitStream *,RakNetTime,NetworkID,Replica *,SystemAddress,ReplicaManager *,void *) = (ReplicaReturnResult (*)(RakNet::BitStream *,RakNetTime,NetworkID,Replica *,SystemAddress,ReplicaManager *,void *)) 0 ;
  
  arg1 = (ReplicaManager *)jarg1; 
  arg2 = (void *)jarg2;
  arg3 = (ReplicaReturnResult (*)(RakNet::BitStream *,RakNetTime,NetworkID,Replica *,SystemAddress,ReplicaManager *,void *))jarg3; 
  (arg1)->SetReceiveConstructionCB(arg2,arg3);
}
%}
%pragma(csharp) imclasscode=%{
  [DllImport("RakNetWrapper", EntryPoint="CSharp_ReplicaManager_SetReceiveConstructionCB")]
  public static extern void ReplicaManager_SetReceiveConstructionCB(HandleRef jarg1, IntPtr jarg2, ReplicaManager._RM_Delegate_Construction jarg3);
%}
%typemap(cscode) ReplicaManager %{
  [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
  public delegate ReplicaReturnResult _RM_Delegate_Construction(IntPtr inBitStream, uint timestamp, IntPtr networkID, IntPtr existingReplica, IntPtr senderId, IntPtr caller, IntPtr userData);

  public delegate ReplicaReturnResult RM_Delegate_Construction(BitStream inBitStream, uint timestamp, NetworkID networkID, Replica existingReplica, SystemAddress senderId, ReplicaManager caller, IntPtr userData);

  public void SetReceiveConstructionCB(IntPtr _constructionUserData, RM_Delegate_Construction constructionDelegate) {
    this.constructionDelegate = constructionDelegate;
    if (constructionDelegate == null) {
      RakNetBindingsPINVOKE.ReplicaManager_SetReceiveConstructionCB(swigCPtr, IntPtr.Zero, null);
    } else {
      RakNetBindingsPINVOKE.ReplicaManager_SetReceiveConstructionCB(swigCPtr, _constructionUserData, ConstructionAdapter);
    }
  }
  
  private ReplicaReturnResult ConstructionAdapter(IntPtr inBitStream, uint timestamp, IntPtr networkID, IntPtr existingReplica, IntPtr senderId, IntPtr caller, IntPtr userData) {
    System.Diagnostics.Debug.Assert(constructionDelegate != null);
    return constructionDelegate(new BitStream(inBitStream, false), timestamp, new NetworkID(networkID, false), new Replica(existingReplica, false), new SystemAddress(senderId, false), new ReplicaManager(caller, false), userData);
  }

  private RM_Delegate_Construction constructionDelegate;
%}

%include "<%= @raknet_home %>/ReplicaManager.h"

<%= @type_mapper.end_scope %>
