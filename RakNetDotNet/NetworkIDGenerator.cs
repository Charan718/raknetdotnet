/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNetDotNet {

using System;
using System.Runtime.InteropServices;

public class NetworkIDGenerator : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NetworkIDGenerator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(NetworkIDGenerator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~NetworkIDGenerator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      Parent = null;
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        RakNetPINVOKE.delete_NetworkIDGenerator(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public object Parent {
    get {
      IntPtr parent = GetParent();
      if (parent == IntPtr.Zero) return null;
      return GCHandle.FromIntPtr(parent).Target;
    }
    set {
      if (value != null) {
        GCHandle gch = GCHandle.Alloc(value);
        SetParent(GCHandle.ToIntPtr(gch));
      } else {
        IntPtr parent = GetParent();
        if (parent == IntPtr.Zero) return;
        SetParent(IntPtr.Zero);
        GCHandle.FromIntPtr(parent).Free();
      }
    }
  }
  
  public static object GET_OBJECT_FROM_ID(NetworkID x) {
    IntPtr parent = GET_OBJECT_FROM_IDImpl(x);
    if (parent == IntPtr.Zero) return null;
    return GCHandle.FromIntPtr(parent).Target;
  }

  public NetworkIDGenerator() : this(RakNetPINVOKE.new_NetworkIDGenerator(), true) {
    SwigDirectorConnect();
  }

  public virtual NetworkID GetNetworkID() {
    NetworkID ret = new NetworkID(((this.GetType() == typeof(NetworkIDGenerator)) ? RakNetPINVOKE.NetworkIDGenerator_GetNetworkID(swigCPtr) : RakNetPINVOKE.NetworkIDGenerator_GetNetworkIDSwigExplicitNetworkIDGenerator(swigCPtr)), true);
    return ret;
  }

  public virtual void SetNetworkID(NetworkID id) {
    if (this.GetType() == typeof(NetworkIDGenerator)) RakNetPINVOKE.NetworkIDGenerator_SetNetworkID(swigCPtr, NetworkID.getCPtr(id)); else RakNetPINVOKE.NetworkIDGenerator_SetNetworkIDSwigExplicitNetworkIDGenerator(swigCPtr, NetworkID.getCPtr(id));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SetParent(IntPtr _parent) {
    if (this.GetType() == typeof(NetworkIDGenerator)) RakNetPINVOKE.NetworkIDGenerator_SetParent(swigCPtr, _parent); else RakNetPINVOKE.NetworkIDGenerator_SetParentSwigExplicitNetworkIDGenerator(swigCPtr, _parent);
  }

  private IntPtr GetParent() {
    return ((this.GetType() == typeof(NetworkIDGenerator)) ? RakNetPINVOKE.NetworkIDGenerator_GetParent(swigCPtr) : RakNetPINVOKE.NetworkIDGenerator_GetParentSwigExplicitNetworkIDGenerator(swigCPtr));
  }

  public static NetworkIDNodeAVLBalancedBinarySearchTree IDTree {
    set {
      RakNetPINVOKE.NetworkIDGenerator_IDTree_set(NetworkIDNodeAVLBalancedBinarySearchTree.getCPtr(value));
    } 
    get {
      IntPtr cPtr = RakNetPINVOKE.NetworkIDGenerator_IDTree_get();
      NetworkIDNodeAVLBalancedBinarySearchTree ret = (cPtr == IntPtr.Zero) ? null : new NetworkIDNodeAVLBalancedBinarySearchTree(cPtr, false);
      return ret;
    } 
  }

  public static ushort GetStaticNetworkID() {
    ushort ret = RakNetPINVOKE.NetworkIDGenerator_GetStaticNetworkID();
    return ret;
  }

  public static void SetStaticNetworkID(ushort i) {
    RakNetPINVOKE.NetworkIDGenerator_SetStaticNetworkID(i);
  }

  public virtual bool IsNetworkIDAuthority() {
    bool ret = RakNetPINVOKE.NetworkIDGenerator_IsNetworkIDAuthority(swigCPtr);
    return ret;
  }

  public static void SetExternalSystemAddress(SystemAddress systemAddress) {
    RakNetPINVOKE.NetworkIDGenerator_SetExternalSystemAddress(SystemAddress.getCPtr(systemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SystemAddress GetExternalSystemAddress() {
    SystemAddress ret = new SystemAddress(RakNetPINVOKE.NetworkIDGenerator_GetExternalSystemAddress(), true);
    return ret;
  }

  public virtual bool RequiresSetParent() {
    bool ret = ((this.GetType() == typeof(NetworkIDGenerator)) ? RakNetPINVOKE.NetworkIDGenerator_RequiresSetParent(swigCPtr) : RakNetPINVOKE.NetworkIDGenerator_RequiresSetParentSwigExplicitNetworkIDGenerator(swigCPtr));
    return ret;
  }

  public static IntPtr GET_BASE_OBJECT_FROM_ID(NetworkID x) {
    return RakNetPINVOKE.NetworkIDGenerator_GET_BASE_OBJECT_FROM_ID(NetworkID.getCPtr(x));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  private static IntPtr GET_OBJECT_FROM_IDImpl(NetworkID x) {
    return RakNetPINVOKE.NetworkIDGenerator_GET_OBJECT_FROM_IDImpl(NetworkID.getCPtr(x));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetNetworkID", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateNetworkIDGenerator_0(SwigDirectorGetNetworkID);
    if (SwigDerivedClassHasMethod("SetNetworkID", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateNetworkIDGenerator_1(SwigDirectorSetNetworkID);
    if (SwigDerivedClassHasMethod("SetParent", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateNetworkIDGenerator_2(SwigDirectorSetParent);
    if (SwigDerivedClassHasMethod("GetParent", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateNetworkIDGenerator_3(SwigDirectorGetParent);
    if (SwigDerivedClassHasMethod("IsNetworkIDAuthority", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateNetworkIDGenerator_4(SwigDirectorIsNetworkIDAuthority);
    if (SwigDerivedClassHasMethod("RequiresSetParent", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateNetworkIDGenerator_5(SwigDirectorRequiresSetParent);
    RakNetPINVOKE.NetworkIDGenerator_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(NetworkIDGenerator));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorGetNetworkID() {
    return NetworkID.getCPtr(GetNetworkID()).Handle;
  }

  private void SwigDirectorSetNetworkID(IntPtr id) {
    SetNetworkID(new NetworkID(id, false));
  }

  private void SwigDirectorSetParent(IntPtr _parent) {
    SetParent(_parent);
  }

  private IntPtr SwigDirectorGetParent() {
    return GetParent();
  }

  private bool SwigDirectorIsNetworkIDAuthority() {
    return IsNetworkIDAuthority();
  }

  private bool SwigDirectorRequiresSetParent() {
    return RequiresSetParent();
  }

  public delegate IntPtr SwigDelegateNetworkIDGenerator_0();
  public delegate void SwigDelegateNetworkIDGenerator_1(IntPtr id);
  public delegate void SwigDelegateNetworkIDGenerator_2(IntPtr _parent);
  public delegate IntPtr SwigDelegateNetworkIDGenerator_3();
  public delegate bool SwigDelegateNetworkIDGenerator_4();
  public delegate bool SwigDelegateNetworkIDGenerator_5();

  private SwigDelegateNetworkIDGenerator_0 swigDelegate0;
  private SwigDelegateNetworkIDGenerator_1 swigDelegate1;
  private SwigDelegateNetworkIDGenerator_2 swigDelegate2;
  private SwigDelegateNetworkIDGenerator_3 swigDelegate3;
  private SwigDelegateNetworkIDGenerator_4 swigDelegate4;
  private SwigDelegateNetworkIDGenerator_5 swigDelegate5;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(NetworkID) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(IntPtr) };
  private static Type[] swigMethodTypes3 = new Type[] {  };
  private static Type[] swigMethodTypes4 = new Type[] {  };
  private static Type[] swigMethodTypes5 = new Type[] {  };
}

}
