/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNetDotNet {

using System;
using System.Runtime.InteropServices;

public class RakPeerInterface : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RakPeerInterface(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RakPeerInterface obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RakPeerInterface() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        RakNetPINVOKE.delete_RakPeerInterface(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
  public delegate void _RPI_Delegate_RPCFunction( IntPtr rpcParams );

  public delegate void RPI_Delegate_RPCFunction( RPCParameters rpcParams );
  
  class RPCFunctionAdapter {
    private _RPI_Delegate_RPCFunction callDelegate;
    public _RPI_Delegate_RPCFunction CallDelegate {
      get { return callDelegate; }
    }
    
    private RPI_Delegate_RPCFunction adaptee;
    
    public RPCFunctionAdapter(RPI_Delegate_RPCFunction adaptee) {
      callDelegate = Call;
      this.adaptee = adaptee;
    }
    
    public void Call(IntPtr rpcParams) {
      adaptee(new RPCParameters(rpcParams, false));
    }
  }

  [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
  public delegate void _RPI_Delegate_ClassMemberRPCFunction( IntPtr _this, IntPtr rpcParams );
  
  class ClassMemberRPCAdapter {
    private _RPI_Delegate_ClassMemberRPCFunction callDelegate;
    public _RPI_Delegate_ClassMemberRPCFunction CallDelegate {
      get { return callDelegate; }
    }
    
    private System.Reflection.MethodInfo mi;
    
    public ClassMemberRPCAdapter(System.Reflection.MethodInfo mi) {
      callDelegate = Call;
      this.mi = mi;
    }
    
    public void Call(IntPtr _this, IntPtr rpcParams) {
      if (_this == IntPtr.Zero) return;
      mi.Invoke(GCHandle.FromIntPtr(_this).Target, new object[] { new RPCParameters(rpcParams, false) });
    }
  }

  private System.Collections.IDictionary rpcFunctions = new System.Collections.Specialized.HybridDictionary();  // avoid GC.

  public virtual void RegisterAsRemoteProcedureCall(string uniqueID, RPI_Delegate_RPCFunction functionPointer) {
    RPCFunctionAdapter adapter = new RPCFunctionAdapter(functionPointer);
    rpcFunctions.Add(uniqueID, adapter);
    RakNetPINVOKE.RakPeerInterface_RegisterAsRemoteProcedureCall(swigCPtr, uniqueID, adapter.CallDelegate);
  }
  
  public virtual void RegisterClassMemberRPC(string uniqueID, System.Reflection.MethodInfo mi) {
    ClassMemberRPCAdapter adapter = new ClassMemberRPCAdapter(mi);
    rpcFunctions.Add(uniqueID, adapter);
    RakNetPINVOKE.RakPeerInterface_RegisterClassMemberRPC(swigCPtr, uniqueID, adapter.CallDelegate);
  }

  public virtual void UnregisterAsRemoteProcedureCall(string uniqueID) {
    UnregisterAsRemoteProcedureCallImpl(uniqueID);
    rpcFunctions.Remove(uniqueID);
  }
  
  public virtual void Shutdown(uint blockDuration, byte orderingChannel) {
    ShutdownImpl(blockDuration, orderingChannel);
    rpcFunctions.Clear();
  }

  public virtual void Shutdown(uint blockDuration) {
    ShutdownImpl(blockDuration);
    rpcFunctions.Clear();
  }

  public virtual bool Startup(ushort maxConnections, int _threadSleepTimer, SocketDescriptor[] socketDescriptors, uint socketDescriptorCount) {
    bool ret = RakNetPINVOKE.RakPeerInterface_Startup(swigCPtr, maxConnections, _threadSleepTimer, socketDescriptors, socketDescriptorCount);
    return ret;
  }

  public virtual void InitializeSecurity(string pubKeyE, string pubKeyN, string privKeyP, string privKeyQ) {
    RakNetPINVOKE.RakPeerInterface_InitializeSecurity(swigCPtr, pubKeyE, pubKeyN, privKeyP, privKeyQ);
  }

  public virtual void DisableSecurity() {
    RakNetPINVOKE.RakPeerInterface_DisableSecurity(swigCPtr);
  }

  public virtual void SetMaximumIncomingConnections(ushort numberAllowed) {
    RakNetPINVOKE.RakPeerInterface_SetMaximumIncomingConnections(swigCPtr, numberAllowed);
  }

  public virtual ushort GetMaximumIncomingConnections() {
    ushort ret = RakNetPINVOKE.RakPeerInterface_GetMaximumIncomingConnections(swigCPtr);
    return ret;
  }

  public virtual ushort NumberOfConnections() {
    ushort ret = RakNetPINVOKE.RakPeerInterface_NumberOfConnections(swigCPtr);
    return ret;
  }

  public virtual void SetIncomingPassword(string passwordData, int passwordDataLength) {
    RakNetPINVOKE.RakPeerInterface_SetIncomingPassword(swigCPtr, passwordData, passwordDataLength);
  }

  public virtual void GetIncomingPassword(string passwordData, SWIGTYPE_p_int passwordDataLength) {
    RakNetPINVOKE.RakPeerInterface_GetIncomingPassword(swigCPtr, passwordData, SWIGTYPE_p_int.getCPtr(passwordDataLength));
  }

  public virtual bool Connect(string host, ushort remotePort, string passwordData, int passwordDataLength, uint connectionSocketIndex) {
    bool ret = RakNetPINVOKE.RakPeerInterface_Connect__SWIG_0(swigCPtr, host, remotePort, passwordData, passwordDataLength, connectionSocketIndex);
    return ret;
  }

  public virtual bool Connect(string host, ushort remotePort, string passwordData, int passwordDataLength) {
    bool ret = RakNetPINVOKE.RakPeerInterface_Connect__SWIG_1(swigCPtr, host, remotePort, passwordData, passwordDataLength);
    return ret;
  }

  private void ShutdownImpl(uint blockDuration, byte orderingChannel) {
    RakNetPINVOKE.RakPeerInterface_ShutdownImpl__SWIG_0(swigCPtr, blockDuration, orderingChannel);
  }

  private void ShutdownImpl(uint blockDuration) {
    RakNetPINVOKE.RakPeerInterface_ShutdownImpl__SWIG_1(swigCPtr, blockDuration);
  }

  public virtual bool IsActive() {
    bool ret = RakNetPINVOKE.RakPeerInterface_IsActive(swigCPtr);
    return ret;
  }

  public virtual bool GetConnectionList(SystemAddress remoteSystems, SWIGTYPE_p_unsigned_short numberOfSystems) {
    bool ret = RakNetPINVOKE.RakPeerInterface_GetConnectionList(swigCPtr, SystemAddress.getCPtr(remoteSystems), SWIGTYPE_p_unsigned_short.getCPtr(numberOfSystems));
    return ret;
  }

  public virtual bool Send(byte[] data, int length, PacketPriority priority, PacketReliability reliability, byte orderingChannel, SystemAddress systemAddress, bool broadcast) {
    bool ret = RakNetPINVOKE.RakPeerInterface_Send__SWIG_0(swigCPtr, data, length, (int)priority, (int)reliability, orderingChannel, SystemAddress.getCPtr(systemAddress), broadcast);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Send(BitStream bitStream, PacketPriority priority, PacketReliability reliability, byte orderingChannel, SystemAddress systemAddress, bool broadcast) {
    bool ret = RakNetPINVOKE.RakPeerInterface_Send__SWIG_1(swigCPtr, BitStream.getCPtr(bitStream), (int)priority, (int)reliability, orderingChannel, SystemAddress.getCPtr(systemAddress), broadcast);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Packet Receive() {
    IntPtr cPtr = RakNetPINVOKE.RakPeerInterface_Receive(swigCPtr);
    Packet ret = (cPtr == IntPtr.Zero) ? null : new Packet(cPtr, false);
    return ret;
  }

  public virtual void DeallocatePacket(Packet packet) {
    RakNetPINVOKE.RakPeerInterface_DeallocatePacket(swigCPtr, Packet.getCPtr(packet));
  }

  public virtual ushort GetMaximumNumberOfPeers() {
    ushort ret = RakNetPINVOKE.RakPeerInterface_GetMaximumNumberOfPeers(swigCPtr);
    return ret;
  }

  private void UnregisterAsRemoteProcedureCallImpl(string uniqueID) {
    RakNetPINVOKE.RakPeerInterface_UnregisterAsRemoteProcedureCallImpl(swigCPtr, uniqueID);
  }

  public virtual bool RPC(string uniqueID, byte[] data, uint bitLength, PacketPriority priority, PacketReliability reliability, byte orderingChannel, SystemAddress systemAddress, bool broadcast, uint includedTimestamp, NetworkID networkID, BitStream replyFromTarget) {
    bool ret = RakNetPINVOKE.RakPeerInterface_RPC__SWIG_0(swigCPtr, uniqueID, data, bitLength, (int)priority, (int)reliability, orderingChannel, SystemAddress.getCPtr(systemAddress), broadcast, includedTimestamp, NetworkID.getCPtr(networkID), BitStream.getCPtr(replyFromTarget));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool RPC(string uniqueID, BitStream bitStream, PacketPriority priority, PacketReliability reliability, byte orderingChannel, SystemAddress systemAddress, bool broadcast, uint includedTimestamp, NetworkID networkID, BitStream replyFromTarget) {
    bool ret = RakNetPINVOKE.RakPeerInterface_RPC__SWIG_1(swigCPtr, uniqueID, BitStream.getCPtr(bitStream), (int)priority, (int)reliability, orderingChannel, SystemAddress.getCPtr(systemAddress), broadcast, includedTimestamp, NetworkID.getCPtr(networkID), BitStream.getCPtr(replyFromTarget));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CloseConnection(SystemAddress target, bool sendDisconnectionNotification, byte orderingChannel) {
    RakNetPINVOKE.RakPeerInterface_CloseConnection__SWIG_0(swigCPtr, SystemAddress.getCPtr(target), sendDisconnectionNotification, orderingChannel);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void CloseConnection(SystemAddress target, bool sendDisconnectionNotification) {
    RakNetPINVOKE.RakPeerInterface_CloseConnection__SWIG_1(swigCPtr, SystemAddress.getCPtr(target), sendDisconnectionNotification);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetIndexFromSystemAddress(SystemAddress systemAddress) {
    int ret = RakNetPINVOKE.RakPeerInterface_GetIndexFromSystemAddress(swigCPtr, SystemAddress.getCPtr(systemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SystemAddress GetSystemAddressFromIndex(int index) {
    SystemAddress ret = new SystemAddress(RakNetPINVOKE.RakPeerInterface_GetSystemAddressFromIndex(swigCPtr, index), true);
    return ret;
  }

  public virtual void AddToBanList(string IP, uint milliseconds) {
    RakNetPINVOKE.RakPeerInterface_AddToBanList__SWIG_0(swigCPtr, IP, milliseconds);
  }

  public virtual void AddToBanList(string IP) {
    RakNetPINVOKE.RakPeerInterface_AddToBanList__SWIG_1(swigCPtr, IP);
  }

  public virtual void RemoveFromBanList(string IP) {
    RakNetPINVOKE.RakPeerInterface_RemoveFromBanList(swigCPtr, IP);
  }

  public virtual void ClearBanList() {
    RakNetPINVOKE.RakPeerInterface_ClearBanList(swigCPtr);
  }

  public virtual bool IsBanned(string IP) {
    bool ret = RakNetPINVOKE.RakPeerInterface_IsBanned(swigCPtr, IP);
    return ret;
  }

  public virtual void Ping(SystemAddress target) {
    RakNetPINVOKE.RakPeerInterface_Ping__SWIG_0(swigCPtr, SystemAddress.getCPtr(target));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Ping(string host, ushort remotePort, bool onlyReplyOnAcceptingConnections, uint connectionSocketIndex) {
    RakNetPINVOKE.RakPeerInterface_Ping__SWIG_1(swigCPtr, host, remotePort, onlyReplyOnAcceptingConnections, connectionSocketIndex);
  }

  public virtual void Ping(string host, ushort remotePort, bool onlyReplyOnAcceptingConnections) {
    RakNetPINVOKE.RakPeerInterface_Ping__SWIG_2(swigCPtr, host, remotePort, onlyReplyOnAcceptingConnections);
  }

  public virtual int GetAveragePing(SystemAddress systemAddress) {
    int ret = RakNetPINVOKE.RakPeerInterface_GetAveragePing(swigCPtr, SystemAddress.getCPtr(systemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetLastPing(SystemAddress systemAddress) {
    int ret = RakNetPINVOKE.RakPeerInterface_GetLastPing(swigCPtr, SystemAddress.getCPtr(systemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetLowestPing(SystemAddress systemAddress) {
    int ret = RakNetPINVOKE.RakPeerInterface_GetLowestPing(swigCPtr, SystemAddress.getCPtr(systemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetOccasionalPing(bool doPing) {
    RakNetPINVOKE.RakPeerInterface_SetOccasionalPing(swigCPtr, doPing);
  }

  public virtual void SetOfflinePingResponse(byte[] data, uint length) {
    RakNetPINVOKE.RakPeerInterface_SetOfflinePingResponse(swigCPtr, data, length);
  }

  public virtual SystemAddress GetInternalID(SystemAddress systemAddress) {
    SystemAddress ret = new SystemAddress(RakNetPINVOKE.RakPeerInterface_GetInternalID__SWIG_0(swigCPtr, SystemAddress.getCPtr(systemAddress)), true);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SystemAddress GetInternalID() {
    SystemAddress ret = new SystemAddress(RakNetPINVOKE.RakPeerInterface_GetInternalID__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual SystemAddress GetExternalID(SystemAddress target) {
    SystemAddress ret = new SystemAddress(RakNetPINVOKE.RakPeerInterface_GetExternalID(swigCPtr, SystemAddress.getCPtr(target)), true);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetTimeoutTime(uint timeMS, SystemAddress target) {
    RakNetPINVOKE.RakPeerInterface_SetTimeoutTime(swigCPtr, timeMS, SystemAddress.getCPtr(target));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool SetMTUSize(int size) {
    bool ret = RakNetPINVOKE.RakPeerInterface_SetMTUSize(swigCPtr, size);
    return ret;
  }

  public virtual int GetMTUSize() {
    int ret = RakNetPINVOKE.RakPeerInterface_GetMTUSize(swigCPtr);
    return ret;
  }

  public virtual uint GetNumberOfAddresses() {
    uint ret = RakNetPINVOKE.RakPeerInterface_GetNumberOfAddresses(swigCPtr);
    return ret;
  }

  public virtual string GetLocalIP(uint index) {
    string ret = RakNetPINVOKE.RakPeerInterface_GetLocalIP(swigCPtr, index);
    return ret;
  }

  public virtual void AllowConnectionResponseIPMigration(bool allow) {
    RakNetPINVOKE.RakPeerInterface_AllowConnectionResponseIPMigration(swigCPtr, allow);
  }

  public virtual void AdvertiseSystem(string host, ushort remotePort, byte[] data, int dataLength, uint connectionSocketIndex) {
    RakNetPINVOKE.RakPeerInterface_AdvertiseSystem__SWIG_0(swigCPtr, host, remotePort, data, dataLength, connectionSocketIndex);
  }

  public virtual void AdvertiseSystem(string host, ushort remotePort, byte[] data, int dataLength) {
    RakNetPINVOKE.RakPeerInterface_AdvertiseSystem__SWIG_1(swigCPtr, host, remotePort, data, dataLength);
  }

  public virtual void SetSplitMessageProgressInterval(int interval) {
    RakNetPINVOKE.RakPeerInterface_SetSplitMessageProgressInterval(swigCPtr, interval);
  }

  public virtual void SetUnreliableTimeout(uint timeoutMS) {
    RakNetPINVOKE.RakPeerInterface_SetUnreliableTimeout(swigCPtr, timeoutMS);
  }

  public virtual void SetCompileFrequencyTable(bool doCompile) {
    RakNetPINVOKE.RakPeerInterface_SetCompileFrequencyTable(swigCPtr, doCompile);
  }

  public virtual bool GetOutgoingFrequencyTable(SWIGTYPE_p_unsigned_int outputFrequencyTable) {
    bool ret = RakNetPINVOKE.RakPeerInterface_GetOutgoingFrequencyTable(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(outputFrequencyTable));
    return ret;
  }

  public virtual bool GenerateCompressionLayer(SWIGTYPE_p_unsigned_int inputFrequencyTable, bool inputLayer) {
    bool ret = RakNetPINVOKE.RakPeerInterface_GenerateCompressionLayer(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(inputFrequencyTable), inputLayer);
    return ret;
  }

  public virtual bool DeleteCompressionLayer(bool inputLayer) {
    bool ret = RakNetPINVOKE.RakPeerInterface_DeleteCompressionLayer(swigCPtr, inputLayer);
    return ret;
  }

  public virtual float GetCompressionRatio() {
    float ret = RakNetPINVOKE.RakPeerInterface_GetCompressionRatio(swigCPtr);
    return ret;
  }

  public virtual float GetDecompressionRatio() {
    float ret = RakNetPINVOKE.RakPeerInterface_GetDecompressionRatio(swigCPtr);
    return ret;
  }

  public virtual void AttachPlugin(PluginInterface plugin) {
    RakNetPINVOKE.RakPeerInterface_AttachPlugin(swigCPtr, PluginInterface.getCPtr(plugin));
  }

  public virtual void DetachPlugin(PluginInterface messageHandler) {
    RakNetPINVOKE.RakPeerInterface_DetachPlugin(swigCPtr, PluginInterface.getCPtr(messageHandler));
  }

  public virtual void PushBackPacket(Packet packet, bool pushAtHead) {
    RakNetPINVOKE.RakPeerInterface_PushBackPacket(swigCPtr, Packet.getCPtr(packet), pushAtHead);
  }

  public virtual void SetRouterInterface(SWIGTYPE_p_RouterInterface routerInterface) {
    RakNetPINVOKE.RakPeerInterface_SetRouterInterface(swigCPtr, SWIGTYPE_p_RouterInterface.getCPtr(routerInterface));
  }

  public virtual void RemoveRouterInterface(SWIGTYPE_p_RouterInterface routerInterface) {
    RakNetPINVOKE.RakPeerInterface_RemoveRouterInterface(swigCPtr, SWIGTYPE_p_RouterInterface.getCPtr(routerInterface));
  }

  public virtual void ApplyNetworkSimulator(double maxSendBPS, ushort minExtraPing, ushort extraPingVariance) {
    RakNetPINVOKE.RakPeerInterface_ApplyNetworkSimulator(swigCPtr, maxSendBPS, minExtraPing, extraPingVariance);
  }

  public virtual bool IsNetworkSimulatorActive() {
    bool ret = RakNetPINVOKE.RakPeerInterface_IsNetworkSimulatorActive(swigCPtr);
    return ret;
  }

  public virtual RakNetStatisticsStruct GetStatistics(SystemAddress systemAddress) {
    IntPtr cPtr = RakNetPINVOKE.RakPeerInterface_GetStatistics(swigCPtr, SystemAddress.getCPtr(systemAddress));
    RakNetStatisticsStruct ret = (cPtr == IntPtr.Zero) ? null : new RakNetStatisticsStruct(cPtr, false);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetRPCString(byte[] data, uint bitSize, SystemAddress systemAddress) {
    string ret = RakNetPINVOKE.RakPeerInterface_GetRPCString(swigCPtr, data, bitSize, SystemAddress.getCPtr(systemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool SendWithPtr(IntPtr dataPtr, int length, PacketPriority priority, PacketReliability reliability, byte orderingChannel, SystemAddress systemAddress, bool broadcast) {
    bool ret = RakNetPINVOKE.RakPeerInterface_SendWithPtr(swigCPtr, dataPtr, length, (int)priority, (int)reliability, orderingChannel, SystemAddress.getCPtr(systemAddress), broadcast);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
