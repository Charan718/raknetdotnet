/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNetDotNet {

using System;
using System.Runtime.InteropServices;

public class StringCompressor : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StringCompressor(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(StringCompressor obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringCompressor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        RakNetPINVOKE.delete_StringCompressor(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static StringCompressor Instance() {
    IntPtr cPtr = RakNetPINVOKE.StringCompressor_Instance();
    StringCompressor ret = (cPtr == IntPtr.Zero) ? null : new StringCompressor(cPtr, false);
    return ret;
  }

  public void GenerateTreeFromStrings(string input, uint inputLength, int languageID) {
    RakNetPINVOKE.StringCompressor_GenerateTreeFromStrings(swigCPtr, input, inputLength, languageID);
  }

  public void EncodeString(string input, int maxCharsToWrite, BitStream output, int languageID) {
    RakNetPINVOKE.StringCompressor_EncodeString__SWIG_0(swigCPtr, input, maxCharsToWrite, BitStream.getCPtr(output), languageID);
  }

  public void EncodeString(string input, int maxCharsToWrite, BitStream output) {
    RakNetPINVOKE.StringCompressor_EncodeString__SWIG_1(swigCPtr, input, maxCharsToWrite, BitStream.getCPtr(output));
  }

  public bool DecodeString(string output, int maxCharsToWrite, BitStream input, int languageID) {
    bool ret = RakNetPINVOKE.StringCompressor_DecodeString__SWIG_0(swigCPtr, output, maxCharsToWrite, BitStream.getCPtr(input), languageID);
    return ret;
  }

  public bool DecodeString(string output, int maxCharsToWrite, BitStream input) {
    bool ret = RakNetPINVOKE.StringCompressor_DecodeString__SWIG_1(swigCPtr, output, maxCharsToWrite, BitStream.getCPtr(input));
    return ret;
  }

  public static void AddReference() {
    RakNetPINVOKE.StringCompressor_AddReference();
  }

  public static void RemoveReference() {
    RakNetPINVOKE.StringCompressor_RemoveReference();
  }

}

}
