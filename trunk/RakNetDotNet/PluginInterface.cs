/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNetDotNet {

using System;
using System.Runtime.InteropServices;

public class PluginInterface : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PluginInterface(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PluginInterface obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PluginInterface() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        RakNetPINVOKE.delete_PluginInterface(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual void OnAttach(RakPeerInterface peer) {
    RakNetPINVOKE.PluginInterface_OnAttach(swigCPtr, RakPeerInterface.getCPtr(peer));
  }

  public virtual void OnDetach(RakPeerInterface peer) {
    RakNetPINVOKE.PluginInterface_OnDetach(swigCPtr, RakPeerInterface.getCPtr(peer));
  }

  public virtual void OnStartup(RakPeerInterface peer) {
    RakNetPINVOKE.PluginInterface_OnStartup(swigCPtr, RakPeerInterface.getCPtr(peer));
  }

  public virtual void Update(RakPeerInterface peer) {
    RakNetPINVOKE.PluginInterface_Update(swigCPtr, RakPeerInterface.getCPtr(peer));
  }

  public virtual PluginReceiveResult OnReceive(RakPeerInterface peer, Packet packet) {
    PluginReceiveResult ret = (PluginReceiveResult)RakNetPINVOKE.PluginInterface_OnReceive(swigCPtr, RakPeerInterface.getCPtr(peer), Packet.getCPtr(packet));
    return ret;
  }

  public virtual void OnShutdown(RakPeerInterface peer) {
    RakNetPINVOKE.PluginInterface_OnShutdown(swigCPtr, RakPeerInterface.getCPtr(peer));
  }

  public virtual void OnCloseConnection(RakPeerInterface peer, SystemAddress systemAddress) {
    RakNetPINVOKE.PluginInterface_OnCloseConnection(swigCPtr, RakPeerInterface.getCPtr(peer), SystemAddress.getCPtr(systemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnDirectSocketSend(string data, uint bitsUsed, SystemAddress remoteSystemAddress) {
    RakNetPINVOKE.PluginInterface_OnDirectSocketSend(swigCPtr, data, bitsUsed, SystemAddress.getCPtr(remoteSystemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnDirectSocketReceive(string data, uint bitsUsed, SystemAddress remoteSystemAddress) {
    RakNetPINVOKE.PluginInterface_OnDirectSocketReceive(swigCPtr, data, bitsUsed, SystemAddress.getCPtr(remoteSystemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnInternalPacket(SWIGTYPE_p_InternalPacket internalPacket, uint frameNumber, SystemAddress remoteSystemAddress, uint time, bool isSend) {
    RakNetPINVOKE.PluginInterface_OnInternalPacket(swigCPtr, SWIGTYPE_p_InternalPacket.getCPtr(internalPacket), frameNumber, SystemAddress.getCPtr(remoteSystemAddress), time, isSend);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public PluginInterface() : this(RakNetPINVOKE.new_PluginInterface(), true) {
  }

}

}
