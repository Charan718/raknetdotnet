/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNetDotNet {

using System;
using System.Runtime.InteropServices;

public class BitStream : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BitStream(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BitStream obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BitStream() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        RakNetPINVOKE.delete_BitStream(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public BitStream() : this(RakNetPINVOKE.new_BitStream__SWIG_0(), true) {
  }

  public BitStream(int initialBytesToAllocate) : this(RakNetPINVOKE.new_BitStream__SWIG_1(initialBytesToAllocate), true) {
  }

  public BitStream(byte[] _data, uint lengthInBytes, bool _copyData) : this(RakNetPINVOKE.new_BitStream__SWIG_2(_data, lengthInBytes, _copyData), true) {
  }

  public void Reset() {
    RakNetPINVOKE.BitStream_Reset(swigCPtr);
  }

  public bool Serialize(bool writeToBitstream, string input, int numberOfBytes) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_1(swigCPtr, writeToBitstream, input, numberOfBytes);
    return ret;
  }

  public bool SerializeBits(bool writeToBitstream, SWIGTYPE_p_unsigned_char input, int numberOfBitsToSerialize, bool rightAlignedBits) {
    bool ret = RakNetPINVOKE.BitStream_SerializeBits__SWIG_0(swigCPtr, writeToBitstream, SWIGTYPE_p_unsigned_char.getCPtr(input), numberOfBitsToSerialize, rightAlignedBits);
    return ret;
  }

  public bool SerializeBits(bool writeToBitstream, SWIGTYPE_p_unsigned_char input, int numberOfBitsToSerialize) {
    bool ret = RakNetPINVOKE.BitStream_SerializeBits__SWIG_1(swigCPtr, writeToBitstream, SWIGTYPE_p_unsigned_char.getCPtr(input), numberOfBitsToSerialize);
    return ret;
  }

  public void Write(byte[] input, int numberOfBytes) {
    RakNetPINVOKE.BitStream_Write__SWIG_1(swigCPtr, input, numberOfBytes);
  }

  public void Write(BitStream bitStream, int numberOfBits) {
    RakNetPINVOKE.BitStream_Write__SWIG_2(swigCPtr, BitStream.getCPtr(bitStream), numberOfBits);
  }

  public void Write(BitStream bitStream) {
    RakNetPINVOKE.BitStream_Write__SWIG_3(swigCPtr, BitStream.getCPtr(bitStream));
  }

  public bool Read(byte[] output, int numberOfBytes) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_1(swigCPtr, output, numberOfBytes);
    return ret;
  }

  public void ResetReadPointer() {
    RakNetPINVOKE.BitStream_ResetReadPointer(swigCPtr);
  }

  public void ResetWritePointer() {
    RakNetPINVOKE.BitStream_ResetWritePointer(swigCPtr);
  }

  public void AssertStreamEmpty() {
    RakNetPINVOKE.BitStream_AssertStreamEmpty(swigCPtr);
  }

  public void PrintBits() {
    RakNetPINVOKE.BitStream_PrintBits(swigCPtr);
  }

  public void IgnoreBits(int numberOfBits) {
    RakNetPINVOKE.BitStream_IgnoreBits(swigCPtr, numberOfBits);
  }

  public void SetWriteOffset(int offset) {
    RakNetPINVOKE.BitStream_SetWriteOffset(swigCPtr, offset);
  }

  public int GetNumberOfBitsUsed() {
    int ret = RakNetPINVOKE.BitStream_GetNumberOfBitsUsed(swigCPtr);
    return ret;
  }

  public int GetWriteOffset() {
    int ret = RakNetPINVOKE.BitStream_GetWriteOffset(swigCPtr);
    return ret;
  }

  public int GetNumberOfBytesUsed() {
    int ret = RakNetPINVOKE.BitStream_GetNumberOfBytesUsed(swigCPtr);
    return ret;
  }

  public int GetReadOffset() {
    int ret = RakNetPINVOKE.BitStream_GetReadOffset(swigCPtr);
    return ret;
  }

  public void SetReadOffset(int newReadOffset) {
    RakNetPINVOKE.BitStream_SetReadOffset(swigCPtr, newReadOffset);
  }

  public int GetNumberOfUnreadBits() {
    int ret = RakNetPINVOKE.BitStream_GetNumberOfUnreadBits(swigCPtr);
    return ret;
  }

  public int CopyData(SWIGTYPE_p_p_unsigned_char _data) {
    int ret = RakNetPINVOKE.BitStream_CopyData(swigCPtr, SWIGTYPE_p_p_unsigned_char.getCPtr(_data));
    return ret;
  }

  public void SetData(SWIGTYPE_p_unsigned_char input) {
    RakNetPINVOKE.BitStream_SetData(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(input));
  }

  public SWIGTYPE_p_unsigned_char GetData() {
    IntPtr cPtr = RakNetPINVOKE.BitStream_GetData(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public void WriteBits(byte[] input, int numberOfBitsToWrite, bool rightAlignedBits) {
    RakNetPINVOKE.BitStream_WriteBits__SWIG_0(swigCPtr, input, numberOfBitsToWrite, rightAlignedBits);
  }

  public void WriteBits(byte[] input, int numberOfBitsToWrite) {
    RakNetPINVOKE.BitStream_WriteBits__SWIG_1(swigCPtr, input, numberOfBitsToWrite);
  }

  public void WriteAlignedBytes(byte[] input, int numberOfBytesToWrite) {
    RakNetPINVOKE.BitStream_WriteAlignedBytes(swigCPtr, input, numberOfBytesToWrite);
  }

  public bool ReadAlignedBytes(byte[] output, int numberOfBytesToRead) {
    bool ret = RakNetPINVOKE.BitStream_ReadAlignedBytes(swigCPtr, output, numberOfBytesToRead);
    return ret;
  }

  public void AlignWriteToByteBoundary() {
    RakNetPINVOKE.BitStream_AlignWriteToByteBoundary(swigCPtr);
  }

  public void AlignReadToByteBoundary() {
    RakNetPINVOKE.BitStream_AlignReadToByteBoundary(swigCPtr);
  }

  public bool ReadBits(byte[] output, int numberOfBitsToRead, bool alignBitsToRight) {
    bool ret = RakNetPINVOKE.BitStream_ReadBits__SWIG_0(swigCPtr, output, numberOfBitsToRead, alignBitsToRight);
    return ret;
  }

  public bool ReadBits(byte[] output, int numberOfBitsToRead) {
    bool ret = RakNetPINVOKE.BitStream_ReadBits__SWIG_1(swigCPtr, output, numberOfBitsToRead);
    return ret;
  }

  public void Write0() {
    RakNetPINVOKE.BitStream_Write0(swigCPtr);
  }

  public void Write1() {
    RakNetPINVOKE.BitStream_Write1(swigCPtr);
  }

  public bool ReadBit() {
    bool ret = RakNetPINVOKE.BitStream_ReadBit(swigCPtr);
    return ret;
  }

  public void AssertCopyData() {
    RakNetPINVOKE.BitStream_AssertCopyData(swigCPtr);
  }

  public void SetNumberOfBitsAllocated(uint lengthInBits) {
    RakNetPINVOKE.BitStream_SetNumberOfBitsAllocated(swigCPtr, lengthInBits);
  }

  public void AddBitsAndReallocate(int numberOfBitsToWrite) {
    RakNetPINVOKE.BitStream_AddBitsAndReallocate(swigCPtr, numberOfBitsToWrite);
  }

  public void WriteVector(float x, float y, float z) {
    RakNetPINVOKE.BitStream_WriteVector__SWIG_1(swigCPtr, x, y, z);
  }

  public void WriteVector(double x, double y, double z) {
    RakNetPINVOKE.BitStream_WriteVector__SWIG_2(swigCPtr, x, y, z);
  }

  public void WriteNormVector(float x, float y, float z) {
    RakNetPINVOKE.BitStream_WriteNormVector__SWIG_1(swigCPtr, x, y, z);
  }

  public void WriteNormVector(double x, double y, double z) {
    RakNetPINVOKE.BitStream_WriteNormVector__SWIG_2(swigCPtr, x, y, z);
  }

  public void WriteNormQuat(float w, float x, float y, float z) {
    RakNetPINVOKE.BitStream_WriteNormQuat__SWIG_1(swigCPtr, w, x, y, z);
  }

  public void WriteNormQuat(double w, double x, double y, double z) {
    RakNetPINVOKE.BitStream_WriteNormQuat__SWIG_2(swigCPtr, w, x, y, z);
  }

  public void WriteOrthMatrix(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) {
    RakNetPINVOKE.BitStream_WriteOrthMatrix__SWIG_1(swigCPtr, m00, m01, m02, m10, m11, m12, m20, m21, m22);
  }

  public void WriteOrthMatrix(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22) {
    RakNetPINVOKE.BitStream_WriteOrthMatrix__SWIG_2(swigCPtr, m00, m01, m02, m10, m11, m12, m20, m21, m22);
  }

  public bool ReadVector(out float x, out float y, out float z) {
    bool ret = RakNetPINVOKE.BitStream_ReadVector__SWIG_1(swigCPtr, out x, out y, out z);
    return ret;
  }

  public bool ReadVector(out double x, out double y, out double z) {
    bool ret = RakNetPINVOKE.BitStream_ReadVector__SWIG_2(swigCPtr, out x, out y, out z);
    return ret;
  }

  public bool ReadNormVector(out float x, out float y, out float z) {
    bool ret = RakNetPINVOKE.BitStream_ReadNormVector__SWIG_1(swigCPtr, out x, out y, out z);
    return ret;
  }

  public bool ReadNormVector(out double x, out double y, out double z) {
    bool ret = RakNetPINVOKE.BitStream_ReadNormVector__SWIG_2(swigCPtr, out x, out y, out z);
    return ret;
  }

  public bool ReadNormQuat(out float w, out float x, out float y, out float z) {
    bool ret = RakNetPINVOKE.BitStream_ReadNormQuat__SWIG_1(swigCPtr, out w, out x, out y, out z);
    return ret;
  }

  public bool ReadNormQuat(out double w, out double x, out double y, out double z) {
    bool ret = RakNetPINVOKE.BitStream_ReadNormQuat__SWIG_2(swigCPtr, out w, out x, out y, out z);
    return ret;
  }

  public bool ReadOrthMatrix(out float m00, out float m01, out float m02, out float m10, out float m11, out float m12, out float m20, out float m21, out float m22) {
    bool ret = RakNetPINVOKE.BitStream_ReadOrthMatrix__SWIG_1(swigCPtr, out m00, out m01, out m02, out m10, out m11, out m12, out m20, out m21, out m22);
    return ret;
  }

  public bool ReadOrthMatrix(out double m00, out double m01, out double m02, out double m10, out double m11, out double m12, out double m20, out double m21, out double m22) {
    bool ret = RakNetPINVOKE.BitStream_ReadOrthMatrix__SWIG_2(swigCPtr, out m00, out m01, out m02, out m10, out m11, out m12, out m20, out m21, out m22);
    return ret;
  }

  public void Write(bool var) {
    RakNetPINVOKE.BitStream_Write__SWIG_4(swigCPtr, var);
  }

  public void Write(sbyte var) {
    RakNetPINVOKE.BitStream_Write__SWIG_5(swigCPtr, var);
  }

  public void Write(byte var) {
    RakNetPINVOKE.BitStream_Write__SWIG_6(swigCPtr, var);
  }

  public void Write(short var) {
    RakNetPINVOKE.BitStream_Write__SWIG_7(swigCPtr, var);
  }

  public void Write(ushort var) {
    RakNetPINVOKE.BitStream_Write__SWIG_8(swigCPtr, var);
  }

  public void Write(int var) {
    RakNetPINVOKE.BitStream_Write__SWIG_9(swigCPtr, var);
  }

  public void Write(uint var) {
    RakNetPINVOKE.BitStream_Write__SWIG_10(swigCPtr, var);
  }

  public void Write(float var) {
    RakNetPINVOKE.BitStream_Write__SWIG_13(swigCPtr, var);
  }

  public void Write(double var) {
    RakNetPINVOKE.BitStream_Write__SWIG_14(swigCPtr, var);
  }

  public void WriteDelta(bool currentValue, bool lastValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_2(swigCPtr, currentValue, lastValue);
  }

  public void WriteDelta(bool currentValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_3(swigCPtr, currentValue);
  }

  public void WriteDelta(sbyte currentValue, sbyte lastValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_4(swigCPtr, currentValue, lastValue);
  }

  public void WriteDelta(sbyte currentValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_5(swigCPtr, currentValue);
  }

  public void WriteDelta(byte currentValue, byte lastValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_6(swigCPtr, currentValue, lastValue);
  }

  public void WriteDelta(byte currentValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_7(swigCPtr, currentValue);
  }

  public void WriteDelta(short currentValue, short lastValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_8(swigCPtr, currentValue, lastValue);
  }

  public void WriteDelta(short currentValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_9(swigCPtr, currentValue);
  }

  public void WriteDelta(ushort currentValue, ushort lastValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_10(swigCPtr, currentValue, lastValue);
  }

  public void WriteDelta(ushort currentValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_11(swigCPtr, currentValue);
  }

  public void WriteDelta(int currentValue, int lastValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_12(swigCPtr, currentValue, lastValue);
  }

  public void WriteDelta(int currentValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_13(swigCPtr, currentValue);
  }

  public void WriteDelta(uint currentValue, uint lastValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_14(swigCPtr, currentValue, lastValue);
  }

  public void WriteDelta(uint currentValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_15(swigCPtr, currentValue);
  }

  public void WriteDelta(float currentValue, float lastValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_20(swigCPtr, currentValue, lastValue);
  }

  public void WriteDelta(float currentValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_21(swigCPtr, currentValue);
  }

  public void WriteDelta(double currentValue, double lastValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_22(swigCPtr, currentValue, lastValue);
  }

  public void WriteDelta(double currentValue) {
    RakNetPINVOKE.BitStream_WriteDelta__SWIG_23(swigCPtr, currentValue);
  }

  public void WriteCompressed(bool var) {
    RakNetPINVOKE.BitStream_WriteCompressed__SWIG_1(swigCPtr, var);
  }

  public void WriteCompressed(sbyte var) {
    RakNetPINVOKE.BitStream_WriteCompressed__SWIG_2(swigCPtr, var);
  }

  public void WriteCompressed(byte var) {
    RakNetPINVOKE.BitStream_WriteCompressed__SWIG_3(swigCPtr, var);
  }

  public void WriteCompressed(short var) {
    RakNetPINVOKE.BitStream_WriteCompressed__SWIG_4(swigCPtr, var);
  }

  public void WriteCompressed(ushort var) {
    RakNetPINVOKE.BitStream_WriteCompressed__SWIG_5(swigCPtr, var);
  }

  public void WriteCompressed(int var) {
    RakNetPINVOKE.BitStream_WriteCompressed__SWIG_6(swigCPtr, var);
  }

  public void WriteCompressed(uint var) {
    RakNetPINVOKE.BitStream_WriteCompressed__SWIG_7(swigCPtr, var);
  }

  public void WriteCompressed(float var) {
    RakNetPINVOKE.BitStream_WriteCompressed__SWIG_10(swigCPtr, var);
  }

  public void WriteCompressed(double var) {
    RakNetPINVOKE.BitStream_WriteCompressed__SWIG_11(swigCPtr, var);
  }

  public void WriteCompressedDelta(bool currentValue, bool lastValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_2(swigCPtr, currentValue, lastValue);
  }

  public void WriteCompressedDelta(bool currentValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_3(swigCPtr, currentValue);
  }

  public void WriteCompressedDelta(sbyte currentValue, sbyte lastValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_4(swigCPtr, currentValue, lastValue);
  }

  public void WriteCompressedDelta(sbyte currentValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_5(swigCPtr, currentValue);
  }

  public void WriteCompressedDelta(byte currentValue, byte lastValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_6(swigCPtr, currentValue, lastValue);
  }

  public void WriteCompressedDelta(byte currentValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_7(swigCPtr, currentValue);
  }

  public void WriteCompressedDelta(short currentValue, short lastValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_8(swigCPtr, currentValue, lastValue);
  }

  public void WriteCompressedDelta(short currentValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_9(swigCPtr, currentValue);
  }

  public void WriteCompressedDelta(ushort currentValue, ushort lastValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_10(swigCPtr, currentValue, lastValue);
  }

  public void WriteCompressedDelta(ushort currentValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_11(swigCPtr, currentValue);
  }

  public void WriteCompressedDelta(int currentValue, int lastValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_12(swigCPtr, currentValue, lastValue);
  }

  public void WriteCompressedDelta(int currentValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_13(swigCPtr, currentValue);
  }

  public void WriteCompressedDelta(uint currentValue, uint lastValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_14(swigCPtr, currentValue, lastValue);
  }

  public void WriteCompressedDelta(uint currentValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_15(swigCPtr, currentValue);
  }

  public void WriteCompressedDelta(float currentValue, float lastValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_20(swigCPtr, currentValue, lastValue);
  }

  public void WriteCompressedDelta(float currentValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_21(swigCPtr, currentValue);
  }

  public void WriteCompressedDelta(double currentValue, double lastValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_22(swigCPtr, currentValue, lastValue);
  }

  public void WriteCompressedDelta(double currentValue) {
    RakNetPINVOKE.BitStream_WriteCompressedDelta__SWIG_23(swigCPtr, currentValue);
  }

  public bool Read(out bool var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_2(swigCPtr, out var);
    return ret;
  }

  public bool Read(out sbyte var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_3(swigCPtr, out var);
    return ret;
  }

  public bool Read(out byte var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_4(swigCPtr, out var);
    return ret;
  }

  public bool Read(out short var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_5(swigCPtr, out var);
    return ret;
  }

  public bool Read(out ushort var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_6(swigCPtr, out var);
    return ret;
  }

  public bool Read(out int var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_7(swigCPtr, out var);
    return ret;
  }

  public bool Read(out uint var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_8(swigCPtr, out var);
    return ret;
  }

  public bool Read(out float var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_11(swigCPtr, out var);
    return ret;
  }

  public bool Read(out double var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_12(swigCPtr, out var);
    return ret;
  }

  public bool ReadDelta(out bool var) {
    bool ret = RakNetPINVOKE.BitStream_ReadDelta__SWIG_1(swigCPtr, out var);
    return ret;
  }

  public bool ReadDelta(out sbyte var) {
    bool ret = RakNetPINVOKE.BitStream_ReadDelta__SWIG_2(swigCPtr, out var);
    return ret;
  }

  public bool ReadDelta(out byte var) {
    bool ret = RakNetPINVOKE.BitStream_ReadDelta__SWIG_3(swigCPtr, out var);
    return ret;
  }

  public bool ReadDelta(out short var) {
    bool ret = RakNetPINVOKE.BitStream_ReadDelta__SWIG_4(swigCPtr, out var);
    return ret;
  }

  public bool ReadDelta(out ushort var) {
    bool ret = RakNetPINVOKE.BitStream_ReadDelta__SWIG_5(swigCPtr, out var);
    return ret;
  }

  public bool ReadDelta(out int var) {
    bool ret = RakNetPINVOKE.BitStream_ReadDelta__SWIG_6(swigCPtr, out var);
    return ret;
  }

  public bool ReadDelta(out uint var) {
    bool ret = RakNetPINVOKE.BitStream_ReadDelta__SWIG_7(swigCPtr, out var);
    return ret;
  }

  public bool ReadDelta(out float var) {
    bool ret = RakNetPINVOKE.BitStream_ReadDelta__SWIG_10(swigCPtr, out var);
    return ret;
  }

  public bool ReadDelta(out double var) {
    bool ret = RakNetPINVOKE.BitStream_ReadDelta__SWIG_11(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressed(out bool var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressed__SWIG_1(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressed(out sbyte var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressed__SWIG_2(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressed(out byte var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressed__SWIG_3(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressed(out short var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressed__SWIG_4(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressed(out ushort var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressed__SWIG_5(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressed(out int var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressed__SWIG_6(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressed(out uint var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressed__SWIG_7(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressed(out float var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressed__SWIG_10(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressed(out double var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressed__SWIG_11(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressedDelta(out bool var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressedDelta__SWIG_1(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressedDelta(out sbyte var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressedDelta__SWIG_2(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressedDelta(out byte var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressedDelta__SWIG_3(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressedDelta(out short var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressedDelta__SWIG_4(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressedDelta(out ushort var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressedDelta__SWIG_5(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressedDelta(out int var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressedDelta__SWIG_6(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressedDelta(out uint var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressedDelta__SWIG_7(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressedDelta(out float var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressedDelta__SWIG_10(swigCPtr, out var);
    return ret;
  }

  public bool ReadCompressedDelta(out double var) {
    bool ret = RakNetPINVOKE.BitStream_ReadCompressedDelta__SWIG_11(swigCPtr, out var);
    return ret;
  }

  public bool SerializeVector(bool writeToBitstream, ref float x, ref float y, ref float z) {
    bool ret = RakNetPINVOKE.BitStream_SerializeVector__SWIG_1(swigCPtr, writeToBitstream, ref x, ref y, ref z);
    return ret;
  }

  public bool SerializeVector(bool writeToBitstream, ref double x, ref double y, ref double z) {
    bool ret = RakNetPINVOKE.BitStream_SerializeVector__SWIG_2(swigCPtr, writeToBitstream, ref x, ref y, ref z);
    return ret;
  }

  public bool SerializeNormVector(bool writeToBitstream, ref float x, ref float y, ref float z) {
    bool ret = RakNetPINVOKE.BitStream_SerializeNormVector__SWIG_1(swigCPtr, writeToBitstream, ref x, ref y, ref z);
    return ret;
  }

  public bool SerializeNormVector(bool writeToBitstream, ref double x, ref double y, ref double z) {
    bool ret = RakNetPINVOKE.BitStream_SerializeNormVector__SWIG_2(swigCPtr, writeToBitstream, ref x, ref y, ref z);
    return ret;
  }

  public bool SerializeNormQuat(bool writeToBitstream, ref float w, ref float x, ref float y, ref float z) {
    bool ret = RakNetPINVOKE.BitStream_SerializeNormQuat__SWIG_1(swigCPtr, writeToBitstream, ref w, ref x, ref y, ref z);
    return ret;
  }

  public bool SerializeNormQuat(bool writeToBitstream, ref double w, ref double x, ref double y, ref double z) {
    bool ret = RakNetPINVOKE.BitStream_SerializeNormQuat__SWIG_2(swigCPtr, writeToBitstream, ref w, ref x, ref y, ref z);
    return ret;
  }

  public bool SerializeOrthMatrix(bool writeToBitstream, ref float m00, ref float m01, ref float m02, ref float m10, ref float m11, ref float m12, ref float m20, ref float m21, ref float m22) {
    bool ret = RakNetPINVOKE.BitStream_SerializeOrthMatrix__SWIG_1(swigCPtr, writeToBitstream, ref m00, ref m01, ref m02, ref m10, ref m11, ref m12, ref m20, ref m21, ref m22);
    return ret;
  }

  public bool SerializeOrthMatrix(bool writeToBitstream, ref double m00, ref double m01, ref double m02, ref double m10, ref double m11, ref double m12, ref double m20, ref double m21, ref double m22) {
    bool ret = RakNetPINVOKE.BitStream_SerializeOrthMatrix__SWIG_2(swigCPtr, writeToBitstream, ref m00, ref m01, ref m02, ref m10, ref m11, ref m12, ref m20, ref m21, ref m22);
    return ret;
  }

  public bool Serialize(bool writeToBitstream, ref bool var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_2(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool Serialize(bool writeToBitstream, ref sbyte var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_3(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool Serialize(bool writeToBitstream, ref byte var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_4(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool Serialize(bool writeToBitstream, ref short var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_5(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool Serialize(bool writeToBitstream, ref ushort var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_6(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool Serialize(bool writeToBitstream, ref int var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_7(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool Serialize(bool writeToBitstream, ref uint var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_8(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool Serialize(bool writeToBitstream, ref float var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_11(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool Serialize(bool writeToBitstream, ref double var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_12(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref bool currentValue, bool lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_2(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref bool currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_3(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref sbyte currentValue, sbyte lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_4(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref sbyte currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_5(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref byte currentValue, byte lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_6(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref byte currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_7(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref short currentValue, short lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_8(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref short currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_9(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref ushort currentValue, ushort lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_10(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref ushort currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_11(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref int currentValue, int lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_12(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref int currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_13(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref uint currentValue, uint lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_14(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref uint currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_15(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref float currentValue, float lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_20(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref float currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_21(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref double currentValue, double lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_22(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeDelta(bool writeToBitstream, ref double currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeDelta__SWIG_23(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeCompressed(bool writeToBitstream, ref bool var) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressed__SWIG_1(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeCompressed(bool writeToBitstream, ref sbyte var) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressed__SWIG_2(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeCompressed(bool writeToBitstream, ref byte var) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressed__SWIG_3(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeCompressed(bool writeToBitstream, ref short var) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressed__SWIG_4(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeCompressed(bool writeToBitstream, ref ushort var) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressed__SWIG_5(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeCompressed(bool writeToBitstream, ref int var) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressed__SWIG_6(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeCompressed(bool writeToBitstream, ref uint var) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressed__SWIG_7(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeCompressed(bool writeToBitstream, ref float var) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressed__SWIG_10(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeCompressed(bool writeToBitstream, ref double var) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressed__SWIG_11(swigCPtr, writeToBitstream, ref var);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref bool currentValue, bool lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_2(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref bool currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_3(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref sbyte currentValue, sbyte lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_4(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref sbyte currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_5(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref byte currentValue, byte lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_6(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref byte currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_7(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref short currentValue, short lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_8(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref short currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_9(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref ushort currentValue, ushort lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_10(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref ushort currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_11(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref int currentValue, int lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_12(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref int currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_13(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref uint currentValue, uint lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_14(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref uint currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_15(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref float currentValue, float lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_20(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref float currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_21(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref double currentValue, double lastValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_22(swigCPtr, writeToBitstream, ref currentValue, lastValue);
    return ret;
  }

  public bool SerializeCompressedDelta(bool writeToBitstream, ref double currentValue) {
    bool ret = RakNetPINVOKE.BitStream_SerializeCompressedDelta__SWIG_23(swigCPtr, writeToBitstream, ref currentValue);
    return ret;
  }

  public void Write(NetworkID var) {
    RakNetPINVOKE.BitStream_Write__SWIG_15(swigCPtr, NetworkID.getCPtr(var));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Read(NetworkID var) {
    bool ret = RakNetPINVOKE.BitStream_Read__SWIG_13(swigCPtr, NetworkID.getCPtr(var));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Serialize(bool writeToBitstream, NetworkID var) {
    bool ret = RakNetPINVOKE.BitStream_Serialize__SWIG_13(swigCPtr, writeToBitstream, NetworkID.getCPtr(var));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
