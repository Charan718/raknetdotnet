/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNetDotNet {

using System;
using System.Runtime.InteropServices;

public class PacketLogger : PluginInterface {
  private HandleRef swigCPtr;

  internal PacketLogger(IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.PacketLoggerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PacketLogger obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PacketLogger() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        RakNetPINVOKE.delete_PacketLogger(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PacketLogger() : this(RakNetPINVOKE.new_PacketLogger(), true) {
  }

  public override void OnAttach(RakPeerInterface peer) {
    RakNetPINVOKE.PacketLogger_OnAttach(swigCPtr, RakPeerInterface.getCPtr(peer));
  }

  public override void OnDirectSocketSend(string data, uint bitsUsed, SystemAddress remoteSystemAddress) {
    RakNetPINVOKE.PacketLogger_OnDirectSocketSend(swigCPtr, data, bitsUsed, SystemAddress.getCPtr(remoteSystemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void OnDirectSocketReceive(string data, uint bitsUsed, SystemAddress remoteSystemAddress) {
    RakNetPINVOKE.PacketLogger_OnDirectSocketReceive(swigCPtr, data, bitsUsed, SystemAddress.getCPtr(remoteSystemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void OnInternalPacket(SWIGTYPE_p_InternalPacket internalPacket, uint frameNumber, SystemAddress remoteSystemAddress, uint time, bool isSend) {
    RakNetPINVOKE.PacketLogger_OnInternalPacket(swigCPtr, SWIGTYPE_p_InternalPacket.getCPtr(internalPacket), frameNumber, SystemAddress.getCPtr(remoteSystemAddress), time, isSend);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LogHeader() {
    RakNetPINVOKE.PacketLogger_LogHeader(swigCPtr);
  }

  public virtual void WriteLog(string str) {
    RakNetPINVOKE.PacketLogger_WriteLog(swigCPtr, str);
  }

  public virtual void SetPrintID(bool print) {
    RakNetPINVOKE.PacketLogger_SetPrintID(swigCPtr, print);
  }

  public virtual void SetPrintAcks(bool print) {
    RakNetPINVOKE.PacketLogger_SetPrintAcks(swigCPtr, print);
  }

}

}
