/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNetDotNet {

using System;
using System.Runtime.InteropServices;

public class NetworkID : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NetworkID(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(NetworkID obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~NetworkID() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        RakNetPINVOKE.delete_NetworkID(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static bool peerToPeerMode {
    set {
      RakNetPINVOKE.NetworkID_peerToPeerMode_set(value);
    } 
    get {
      bool ret = RakNetPINVOKE.NetworkID_peerToPeerMode_get();
      return ret;
    } 
  }

  public SystemAddress systemAddress {
    set {
      RakNetPINVOKE.NetworkID_systemAddress_set(swigCPtr, SystemAddress.getCPtr(value));
    } 
    get {
      IntPtr cPtr = RakNetPINVOKE.NetworkID_systemAddress_get(swigCPtr);
      SystemAddress ret = (cPtr == IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
      return ret;
    } 
  }

  public ushort localSystemAddress {
    set {
      RakNetPINVOKE.NetworkID_localSystemAddress_set(swigCPtr, value);
    } 
    get {
      ushort ret = RakNetPINVOKE.NetworkID_localSystemAddress_get(swigCPtr);
      return ret;
    } 
  }

  public static bool IsPeerToPeerMode() {
    bool ret = RakNetPINVOKE.NetworkID_IsPeerToPeerMode();
    return ret;
  }

  public static void SetPeerToPeerMode(bool isPeerToPeer) {
    RakNetPINVOKE.NetworkID_SetPeerToPeerMode(isPeerToPeer);
  }

  public NetworkID() : this(RakNetPINVOKE.new_NetworkID(), true) {
  }

}

}
