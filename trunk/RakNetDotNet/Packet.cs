/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNetDotNet {

using System;
using System.Runtime.InteropServices;

public class Packet : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Packet(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Packet obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Packet() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        RakNetPINVOKE.delete_Packet(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public ushort systemIndex {
    set {
      RakNetPINVOKE.Packet_systemIndex_set(swigCPtr, value);
    } 
    get {
      ushort ret = RakNetPINVOKE.Packet_systemIndex_get(swigCPtr);
      return ret;
    } 
  }

  public SystemAddress systemAddress {
    set {
      RakNetPINVOKE.Packet_systemAddress_set(swigCPtr, SystemAddress.getCPtr(value));
    } 
    get {
      IntPtr cPtr = RakNetPINVOKE.Packet_systemAddress_get(swigCPtr);
      SystemAddress ret = (cPtr == IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
      return ret;
    } 
  }

  public uint length {
    set {
      RakNetPINVOKE.Packet_length_set(swigCPtr, value);
    } 
    get {
      uint ret = RakNetPINVOKE.Packet_length_get(swigCPtr);
      return ret;
    } 
  }

  public uint bitSize {
    set {
      RakNetPINVOKE.Packet_bitSize_set(swigCPtr, value);
    } 
    get {
      uint ret = RakNetPINVOKE.Packet_bitSize_get(swigCPtr);
      return ret;
    } 
  }

  public byte[] data {
    get {
      int length = (int)this.length;
      byte[] ret = new byte[length];
      IntPtr data = RakNetPINVOKE.Packet_data_get(swigCPtr);
      System.Runtime.InteropServices.Marshal.Copy(data, ret, 0, length);
      return ret;
    }

  }

  public bool deleteData {
    set {
      RakNetPINVOKE.Packet_deleteData_set(swigCPtr, value);
    } 
    get {
      bool ret = RakNetPINVOKE.Packet_deleteData_get(swigCPtr);
      return ret;
    } 
  }

  public IntPtr GetDataPtr() {
    return RakNetPINVOKE.Packet_GetDataPtr(swigCPtr);
  }

  public Packet() : this(RakNetPINVOKE.new_Packet(), true) {
  }

}

}
