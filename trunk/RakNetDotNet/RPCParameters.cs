/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNetDotNet {

using System;
using System.Runtime.InteropServices;

public class RPCParameters : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RPCParameters(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RPCParameters obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RPCParameters() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        RakNetPINVOKE.delete_RPCParameters(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public byte[] input {
    get {
      int length = (int)this.numberOfBitsOfData/8;
      byte[] ret = new byte[length];
      IntPtr data = RakNetPINVOKE.RPCParameters_input_get(swigCPtr);
      System.Runtime.InteropServices.Marshal.Copy(data, ret, 0, length);
      return ret;
    }

  }

  public uint numberOfBitsOfData {
    set {
      RakNetPINVOKE.RPCParameters_numberOfBitsOfData_set(swigCPtr, value);
    } 
    get {
      uint ret = RakNetPINVOKE.RPCParameters_numberOfBitsOfData_get(swigCPtr);
      return ret;
    } 
  }

  public SystemAddress sender {
    set {
      RakNetPINVOKE.RPCParameters_sender_set(swigCPtr, SystemAddress.getCPtr(value));
    } 
    get {
      IntPtr cPtr = RakNetPINVOKE.RPCParameters_sender_get(swigCPtr);
      SystemAddress ret = (cPtr == IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
      return ret;
    } 
  }

  public RakPeerInterface recipient {
    set {
      RakNetPINVOKE.RPCParameters_recipient_set(swigCPtr, RakPeerInterface.getCPtr(value));
    } 
    get {
      IntPtr cPtr = RakNetPINVOKE.RPCParameters_recipient_get(swigCPtr);
      RakPeerInterface ret = (cPtr == IntPtr.Zero) ? null : new RakPeerInterface(cPtr, false);
      return ret;
    } 
  }

  public BitStream replyToSender {
    set {
      RakNetPINVOKE.RPCParameters_replyToSender_set(swigCPtr, BitStream.getCPtr(value));
    } 
    get {
      IntPtr cPtr = RakNetPINVOKE.RPCParameters_replyToSender_get(swigCPtr);
      BitStream ret = (cPtr == IntPtr.Zero) ? null : new BitStream(cPtr, false);
      return ret;
    } 
  }

  public IntPtr GetInputPtr() {
    return RakNetPINVOKE.RPCParameters_GetInputPtr(swigCPtr);
  }

  public RPCParameters() : this(RakNetPINVOKE.new_RPCParameters(), true) {
  }

}

}
