<%#
大雑把な方針: 
  swigはパターンマッチングによって、C++とC#の間で変数を変換する。マッチング対象はあくまで、変数の型と名前が対象。
  同じ型でも変換方法を変えたいときは、関数宣言で特別な変数名を使うことになる。ところが.hをそのまま使って、ラッパーを
  作成するときはこれができない。でもたいていは、ひとつのヘッダ内だけに注目すれば、型と名前が同じなら
  変換方法も同じでよいことがほとんど。次のような２つの宣言があったとして、
    void foo(char* input);
    void bar(char* input);
  fooはinputを読み込みにしか使わないが、barは書き込みもする。などということがあるだろうか。普通そうはしないはず。
  この仮定で進めることにする...

インタフェースファイル:
  ラップするインタフェースとマッチングルール(%typemap, %apply, %template...)を書いたものだ。swigはパターンマッチングで
  ラッパーのコードを生成するのだけれど、そもそもルールの定義がめんどくさい。swigの開発者はマクロ使いなさいといってる。
  なので最初はBoost.Preprocessorを使って、マクロだけでメタプログラミングしようとしたけど、swigのマクロサポートはコンパイラほどではなかった。
  で、インタフェースファイルも生成してしまうことにした。ERB(Ruby)で。.riはrubyな(swig)interfaceということ。
    swig-renderer.rb ???.ri
  を実行すれば.i相当が得られる。

TODO: まだ.riを変更してもRakNetBindings.iのビルドが走らないことがある
TODO: 余計なマーシャリングが起こらないようにする。何が余計かは使ってみないとわからないだろう。
%>

<%
swig_interfaces_no_ext = Dir.glob('*.ri') - ['RakNetBindings.ri']  # Oneself is excluded
swig_interfaces_no_ext.map! do |filename|
  filename[/.ri$/] = ''
  filename
end

# in dependence order
including_files_no_ext = [
  'Export',
  'RakNetTypes',
  'PluginInterface',
  'PacketLogger',
  'PacketConsoleLogger',
  'PacketFileLogger',
  'AutopatcherRepositoryInterface',
  'AutopatcherPatchContext',
  'TransportInterface',
  'CommandParserInterface',
  'LogCommandParser',
  'RakPeerInterface',
  'RouterInterface',
#  'NetworkIDGenerator',
  'NetworkIDObject',
  'NetworkIDManager',
  'AsynchronousFileIO',
  'CheckSum',
  'ClientContextStruct',
  'ConnectionGraph',
  'ConsoleServer',
  'DataBlockEncryptor',
  'DataCompressor',
  'DirectoryDeltaTransfer',
  'DS_ByteQueue',
  'DS_Heap',
  'DS_HuffmanEncodingTree',
  'DS_HuffmanEncodingTreeNode',
  'DS_LinkedList',
  'DS_Map',
  'DS_MemoryPool',
  'DS_OrderedChannelHeap',
  'DS_OrderedList',
  'DS_Queue',
  'DS_QueueLinkedList',
  'DS_RangeList',
  'DS_Table',
  'DS_List',
  'DS_BPlusTree',
  'DS_Tree',
  'DS_WeightedGraph',
  'EmailSender',
  'ExtendedOverlappedPool',
  'FileList',
  'FileListTransfer',
  'FileListTransferCBInterface',
  'FileOperations',
  'FullyConnectedMesh',
  'GetTime',
  'InternalPacket',
  'LightweightDatabaseClient',
  'LightweightDatabaseCommon',
  'LightweightDatabaseServer',
  'StaticArray',
  'LinuxStrings',
  'MessageFilter',
  'MessageIdentifiers',
  'MTUSize',
  'NatPunchthrough',
  'PacketPool',
  'PacketPriority',
  'RakAssert',
  'RakNetCommandParser',
  'RakNetDefines',
  'RakNetStatistics',
  'RakNetTransport',
  'RakNetworkFactory',
  'RakSleep',
  'Rand',
  'Replica',
  'ReplicaExt',
  'ReplicaEnums',
#  'ReplicaManager',
  'ReplicaManagerExt',
  'RPCMap',
  'RPCNode',
  'SHA1',
  'SimpleMutex',
  'SingleProducerConsumer',
  'StringTable',
  'SystemAddressList',
  'TableSerializer',
  'TelnetTransport',
  'ThreadPool',
  '_findfirst',
  'BitStream',
  'DS_BinarySearchTree',
  'StringCompressor',
#  'Types',
#  'BigTypes',
#  'RSACrypt',
#  'DS_HuffmanEncodingTreeFactory',
#  'rakpeer',
#  'ReliabilityLayer',
#  'rijndael',
#  'rijndael-boxes',
#  'Router',
#  'SimpleTCPServer',
#  'TCPInterface',
#  'SocketLayer',
#  'ThreadsafePacketLogger',
]
%>

<%# generate array code 
raknet_header_files_no_ext = Dir.glob("#{@raknet_home}/*.h").map! do |filename|
  File.basename(filename, '.h')
end
as_is_header_files_no_ext = raknet_header_files_no_ext - swig_interfaces_no_ext
%>
<%# for f in as_is_header_files_no_ext %>
<%#= "'#{f}'," %>
<%# end %>
<%# for f in swig_interfaces_no_ext %>
<%#= "'#{f}'," %>
<%# end %>

%module(directors="1") RakNetBindings
%{
<% for header in including_files_no_ext %>
<%= "#include \"#{header}.h\"" %>
<% end %>
%}

%include "typemaps.i"  // char*, const char* -> string
%include "windows.i"
%include "std_vector.i"

<%= @type_mapper.start_scope('RakNetBindings') %>

// globals
%csconst(1);
%pragma(csharp) imclassclassmodifiers="[System.Security.SuppressUnmanagedCodeSecurity()] public class"  // We stopped using proxy-modifier.rb

<%= @type_mapper.override_typemap_bool_output_input_about_marshaling %>

<%= @type_mapper.typemap_void_ptr('void*', 'VOID_PTR') %>
<%= @type_mapper.typemap_void_ptr('const char*', 'VOID_PTR') %>
<%= @type_mapper.typemap_void_ptr('unsigned char*', 'VOID_PTR') %>

<%= @type_mapper.typemap_input_blittable('char*', 'INPUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_input_blittable('char*', 'INPUT_STRINGBUILDER', 'System.Text.StringBuilder') %>
<%= @type_mapper.typemap_input_blittable('const char*', 'INPUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_input_blittable('unsigned char*', 'INPUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_input_blittable('const unsigned char*', 'INPUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_input_blittable('unsigned *', 'INPUT_BLITTABLE_ARRAY', 'uint[]') %>

<%= @type_mapper.typemap_inout_blittable('char*', 'INOUT_BLITTABLE_ARRAY', 'byte[]') %>
<%= @type_mapper.typemap_inout_blittable('unsigned char*', 'INOUT_BLITTABLE_ARRAY', 'byte[]') %>

// This way is not good. SWIG usually treats bool as 4byte.
<%#= @type_mapper.typemap_ref_blittable('bool*', 'REF_BLITTABLE', 'bool', 
      {:imtype_inattributes=>'[MarshalAs(UnmanagedType.U1)]', :imtype_outattributes=>'[return: MarshalAs(UnmanagedType.U1)]'}) %>
<%#= @type_mapper.typemap_ref_bool('bool*', 'REF_BOOL', 'bool') %>
<%= @type_mapper.typemap_ref_blittable('unsigned int*', 'REF_UINTBOOL', 'bool') %>
// add more types.

// apply directives
<%= @type_mapper.apply_same_ctype('void*', 'VOID_PTR') %>
//<%= @type_mapper.apply_same_ctype('unsigned char*', 'INPUT_BLITTABLE_ARRAY') %>
//<%= @type_mapper.apply_same_ctype('const unsigned char*', 'INPUT_BLITTABLE_ARRAY') %>

<% 
for interface in including_files_no_ext
  if swig_interfaces_no_ext.include?(interface) %>
    <%= "%include \"#{interface}.i\"" %><% 
  else %>
    <%= "%include \"#{@raknet_home}/#{interface}.h\"" %><%
  end
end 
%>

<%= @type_mapper.end_scope %>