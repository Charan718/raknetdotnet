<%= @type_mapper.start_scope('DS_Table') %>
<%= @type_mapper.apply_same_ctype('char*', 'INPUT_STRINGBUILDER', 'out') %>

%rename(TableCell)             Cell;
%rename(TableColumnDescriptor) ColumnDescriptor;
%rename(TableRow)              Row;
%rename(TableFilterQuery)      FilterQuery;

// SWIG ignores a nested class.
struct Cell
{
	Cell();
	~Cell();
	Cell(int intValue, char *charValue, DataStructures::Table::ColumnType type);
	void Clear(void);
	
	/// Numeric
	void Set(int input);

	/// String
	void Set(const char *input);

	/// Binary
	void Set(const char *input, int inputLength);

	/// Numeric
	void Get(int *output);

	/// String
	void Get(char *output);

	/// Binary
	void Get(char *output, int *outputLength);

	// assignment operator and copy constructor
	Cell& operator = ( const Cell& input );
	Cell( const Cell & input);

	bool isEmpty;
	int i;
	char *c;
};
struct ColumnDescriptor
{
	ColumnDescriptor();
	~ColumnDescriptor();
	ColumnDescriptor(const char cn[_TABLE_MAX_COLUMN_NAME_LENGTH],DataStructures::Table::ColumnType ct);

	char columnName[_TABLE_MAX_COLUMN_NAME_LENGTH];
	DataStructures::Table::ColumnType columnType;
};
struct Row
{
	// list of cells
	DataStructures::List<Cell*> cells;

	/// Numeric
	void UpdateCell(unsigned columnIndex, int value);

	/// String
	void UpdateCell(unsigned columnIndex, char *str);

	/// Binary
	void UpdateCell(unsigned columnIndex, int byteLength, char *data);
};
struct FilterQuery
{
	FilterQuery();
	~FilterQuery();
	FilterQuery(unsigned column, Cell *cell, DataStructures::Table::FilterQueryType op);

	unsigned columnIndex;
	Cell *cellValue;
	DataStructures::Table::FilterQueryType operation;
};

%typemap(cscode) DataStructures::List<DataStructures::Table::ColumnDescriptor> %{
  public TableColumnDescriptor this[int position] {
    get { return At(position); }
  }
%}

%include "<%= @raknet_home %>/DS_Table.h"
// TODO - I am confused for handling of a template.
<%= @type_mapper.apply('int', '', 'unsigned int', 'position') %>
%template(ColumnDescriptorList) DataStructures::List<DataStructures::Table::ColumnDescriptor>;

%{
// I need to trick the C++ compiler.
typedef DataStructures::Table::Cell             Cell;
typedef DataStructures::Table::ColumnDescriptor ColumnDescriptor;
typedef DataStructures::Table::Row              Row;
typedef DataStructures::Table::FilterQuery      FilterQuery;

// Why must I implement this?
inline bool operator==(const DataStructures::Table::ColumnDescriptor& lhs, const DataStructures::Table::ColumnDescriptor& rhs) {
  return (strcmp(lhs.columnName, rhs.columnName) == 0) && (lhs.columnType == rhs.columnType);
}
%}

<%= @type_mapper.end_scope %>
