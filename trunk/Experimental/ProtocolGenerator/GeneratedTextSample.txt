using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using Castle.Core;
using RakNetDotNet;
using EventSystem;
namespace Events {
	public partial class ProtocolInfo : IProtocolInfo {
		private static ProtocolInfo instance = new ProtocolInfo();
		public static ProtocolInfo Instance {
			get { return instance; }
		}
		private ProtocolInfo() { }
		public string Name {
			get { return "SampleProtocol"; }
		}
	}
	public partial class ConnectionTest : IEvent {
		public ConnectionTest() {
			id = 0;
		}
		public ConnectionTest(BitStream source) {
			if (!source.Read(out id)) { throw new NetworkException("Deserialization is failed."); }
		}
		public void SetData() {
		}
		public BitStream Stream {
			get {
				BitStream eventStream = new BitStream();
				eventStream.Write(id);
				return eventStream;
			}
		}
		public int Id {
			get { return id; }
			protected set { id = value; }
		}
		int id;
		public int SourceOid {
			get { return sourceOid; }
		}
		int sourceOid;
		public int TargetOid {
			get { return targetOid; }
		}
		int targetOid;
		public SystemAddress Sender {
			get { return sender; }
			set { sender = value; }
		}
		SystemAddress sender = RakNetBindings.UNASSIGNED_SYSTEM_ADDRESS;
		public IProtocolInfo ProtocolInfo {
			get { return Events.ProtocolInfo.Instance; }
		}
	}
	[Transient]
	sealed class EventFactoryOnClient : IEventFactory {
		public IEvent RecreateSimpleEvent(BitStream source) {
			Debug.Assert(source != null);
			IEvent _event;
			int id;
			if(!source.Read(out id)) throw new NetworkException("Deserialization is failed.");
			source.ResetReadPointer();
			switch (id) {
				case 0:
					_event = new ConnectionTest(source);
					break;
				
				default:
					throw new NetworkException(string.Format("Event id {0} not recognized by EventFactoryOnClient.RecreateEvent()!", id));
				
			}
			return _event;
		}
	}
	[Transient]
	sealed class EventHandlersOnClient : IEventHandlers {
		public void CallHandler(IEvent e) {
			switch (e.Id) {
				case 0:
					if (ConnectionTest != null)
						ConnectionTest((ConnectionTest)e);
					break;
				
				default:
					throw new NetworkException(string.Format("Event id {0} not recognized by EventHandlersOnClient.CallHandler()!", e.Id));
				
			}
		}
		public event EventHandler<ConnectionTest> ConnectionTest;
	}
	[Transient]
	sealed class EventFactoryOnFrontEndServer : IEventFactory {
		public IEvent RecreateSimpleEvent(BitStream source) {
			Debug.Assert(source != null);
			IEvent _event;
			int id;
			if(!source.Read(out id)) throw new NetworkException("Deserialization is failed.");
			source.ResetReadPointer();
			switch (id) {
				case 0:
					_event = new ConnectionTest(source);
					break;
				
				default:
					throw new NetworkException(string.Format("Event id {0} not recognized by EventFactoryOnFrontEndServer.RecreateEvent()!", id));
				
			}
			return _event;
		}
	}
	[Transient]
	sealed class EventHandlersOnFrontEndServer : IEventHandlers {
		public void CallHandler(IEvent e) {
			switch (e.Id) {
				case 0:
					if (ConnectionTest != null)
						ConnectionTest((ConnectionTest)e);
					break;
				
				default:
					throw new NetworkException(string.Format("Event id {0} not recognized by EventHandlersOnFrontEndServer.CallHandler()!", e.Id));
				
			}
		}
		public event EventHandler<ConnectionTest> ConnectionTest;
	}
	delegate void EventHandler<T>(T t) where T : IEvent;
}
